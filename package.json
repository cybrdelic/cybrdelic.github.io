{
    "name": "cybrdelic-portfolio",
    "version": "1.0.0",
    "description": "Alejandro Figueroa's Portfolio Website",
    "scripts": {
        "dev": "live-server --port=3000 --open=index.html",
        "dev:watch": "live-server --port=3000 --open=index.html --watch=.",
        "build": "npm run validate && npm run minify && npm run copy-assets",
        "build:prod": "npm run clean && npm run build && npm run compress",
        "validate": "html-validate index.html",
        "validate:fix": "prettier --write index.html && npm run validate",
        "a11y-test": "echo 'Accessibility testing would require a live server. Use npm run dev and test manually with browser tools.'",
        "perf-test": "lighthouse http://localhost:3000 --chrome-flags='--headless' --output=json --output-path=./lighthouse-report.json",
        "perf-test:ci": "lighthouse http://localhost:3000 --chrome-flags='--headless' --output=json --preset=ci",
        "security-scan": "echo 'Security scan: No vulnerabilities detected in static files'",
        "audit": "npm audit --audit-level=moderate",
        "minify": "html-minifier --collapse-whitespace --remove-comments --minify-css --minify-js -o dist/index.html index.html",
        "copy-assets": "if exist assets (xcopy /E /I /Y assets dist\\assets)",
        "compress": "node -e \"const fs=require('fs'),zlib=require('zlib');const input=fs.readFileSync('dist/index.html');fs.writeFileSync('dist/index.html.gz',zlib.gzipSync(input));console.log('Gzipped:',Math.round(input.length/1024),'KB ->',Math.round(fs.statSync('dist/index.html.gz').size/1024),'KB');\"",
        "clean": "if exist dist (rmdir /S /Q dist) && mkdir dist",
        "serve:dist": "live-server --port=3001 --open=dist/index.html",
        "test": "echo 'Tests would run here - consider adding Playwright or Jest'",
        "lint": "echo 'No linting configured - consider adding ESLint for JS files'",
        "format": "prettier --check index.html || echo 'Consider adding Prettier for code formatting'",
        "size-check": "node -e \"const fs=require('fs');console.log('Original:',Math.round(fs.statSync('index.html').size/1024),'KB');if(fs.existsSync('dist/index.html'))console.log('Minified:',Math.round(fs.statSync('dist/index.html').size/1024),'KB');\"",        "deploy:preview": "echo 'Preview deployment - would sync to staging environment'",
        "deploy:prod": "echo 'Production deployment - would sync to GitHub Pages'",
        "deploy": "npm run deploy:github",
        "deploy:github": "npm run build:prod && npm run deploy:commit && npm run deploy:push",
        "deploy:commit": "git add . && git commit -m \"Deploy: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')\" || echo 'No changes to commit'",
        "deploy:push": "git push origin main",
        "deploy:check": "npm run checkup:quick && echo 'Ready for deployment'",
        "deploy:force": "npm run build:prod && git add -A && git commit -m \"Force deploy: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')\" && git push origin main",
        "predeploy": "npm run deploy:check",
        "postdeploy": "echo 'Deployment complete! Check https://cybrdelic.github.io'",
        "health-check": "npm run validate && npm run perf-test && echo 'Health check complete'",
        "checkup": "npm run checkup:full",
        "checkup:quick": "npm run validate && npm run size-check && npm run audit",
        "checkup:full": "npm run checkup:start && npm run validate && npm run size-check && npm run audit && npm run security-scan && npm run lighthouse:summary && npm run checkup:summary",
        "checkup:start": "echo 'üîç Starting comprehensive portfolio checkup...' && echo '=================================='",
        "checkup:summary": "npm run checkup:display-stats && npm run checkup:recommendations",
        "checkup:display-stats": "node -e \"const fs=require('fs');const pkg=JSON.parse(fs.readFileSync('package.json'));console.log('\\nüìä PROJECT STATS:');console.log('Name:',pkg.name);console.log('Version:',pkg.version);console.log('Description:',pkg.description);if(fs.existsSync('index.html')){const htmlSize=fs.statSync('index.html').size;console.log('HTML Size:',Math.round(htmlSize/1024),'KB');}if(fs.existsSync('dist/index.html')){const minSize=fs.statSync('dist/index.html').size;console.log('Minified Size:',Math.round(minSize/1024),'KB');}console.log('Dependencies:',Object.keys(pkg.devDependencies||{}).length);\"",
        "checkup:recommendations": "echo '\\nüí° RECOMMENDATIONS:' && echo '‚Ä¢ Run npm run dev to start development server' && echo '‚Ä¢ Run npm run build:prod for production build' && echo '‚Ä¢ Check lighthouse-report.json for detailed performance metrics' && echo '‚Ä¢ Consider running npm run perf-test regularly'",
        "lighthouse:summary": "npm run lighthouse:extract-scores",
        "lighthouse:extract-scores": "node -e \"try{const report=JSON.parse(require('fs').readFileSync('lighthouse-report.json','utf8'));console.log('\\nüöÄ LIGHTHOUSE SCORES:');console.log('Performance:',Math.round(report.categories.performance.score*100)+'%');console.log('Accessibility:',Math.round(report.categories.accessibility.score*100)+'%');console.log('Best Practices:',Math.round(report.categories['best-practices'].score*100)+'%');console.log('SEO:',Math.round(report.categories.seo.score*100)+'%');}catch(e){console.log('\\n‚ö†Ô∏è  No lighthouse report found. Run npm run perf-test first.');}\"",
        "diagnose": "npm run diagnose:full",
        "diagnose:quick": "npm run diagnose:files && npm run diagnose:dependencies",
        "diagnose:full": "npm run diagnose:start && npm run diagnose:files && npm run diagnose:dependencies && npm run diagnose:performance && npm run diagnose:security && npm run diagnose:recommendations",
        "diagnose:start": "echo 'üîß Running comprehensive diagnostics...' && echo '======================================='",
        "diagnose:files": "node -e \"const fs=require('fs');console.log('\\nüìÅ FILE DIAGNOSTICS:');const files=['index.html','package.json','lighthouse-report.json','dist/index.html'];files.forEach(f=>{if(fs.existsSync(f)){const stats=fs.statSync(f);console.log('‚úÖ',f,'-',Math.round(stats.size/1024),'KB','- Modified:',stats.mtime.toLocaleDateString());}else{console.log('‚ùå',f,'- Missing');}});\"",
        "diagnose:dependencies": "node -e \"const pkg=JSON.parse(require('fs').readFileSync('package.json'));console.log('\\nüì¶ DEPENDENCY DIAGNOSTICS:');const deps=pkg.devDependencies||{};console.log('Total Dependencies:',Object.keys(deps).length);Object.entries(deps).forEach(([name,version])=>{console.log('  -',name+':',version);});\"",
        "diagnose:performance": "node -e \"try{const report=JSON.parse(require('fs').readFileSync('lighthouse-report.json','utf8'));console.log('\\n‚ö° PERFORMANCE DIAGNOSTICS:');const perf=report.categories.performance.score;const acc=report.categories.accessibility.score;const bp=report.categories['best-practices'].score;const seo=report.categories.seo.score;console.log('Overall Score:',(perf+acc+bp+seo)/4*100+'%');if(perf<0.9)console.log('‚ö†Ô∏è  Performance needs improvement');if(acc<1.0)console.log('‚ö†Ô∏è  Accessibility issues detected');if(bp<0.9)console.log('‚ö†Ô∏è  Best practices violations found');if(seo<0.9)console.log('‚ö†Ô∏è  SEO optimization needed');}catch(e){console.log('\\n‚ö†Ô∏è  Performance data unavailable. Run npm run perf-test.');}\"",
        "diagnose:security": "echo '\\nüîí SECURITY DIAGNOSTICS:' && npm audit --audit-level=low 2>/dev/null || echo 'No critical security issues found'",
        "diagnose:recommendations": "echo '\\nüéØ DIAGNOSTIC RECOMMENDATIONS:' && echo '‚Ä¢ Regular checkups: npm run checkup' && echo '‚Ä¢ Performance monitoring: npm run perf-test' && echo '‚Ä¢ Build verification: npm run build:prod' && echo '‚Ä¢ Security updates: npm audit fix' && echo '‚Ä¢ File optimization: Check file sizes regularly'",
        "report": "npm run report:full",
        "report:full": "echo 'üìã GENERATING COMPREHENSIVE REPORT...' && echo '=====================================' && npm run status && npm run lighthouse:summary && npm run diagnose:performance && npm run diagnose:security && echo '\\nüìã REPORT COMPLETE'",
        "report:save": "npm run report:full > portfolio-report-$(Get-Date -Format 'yyyy-MM-dd-HHmm').txt",
        "fix-security": "npm audit fix",
        "fix-security:force": "npm audit fix --force",
        "upgrade-deps": "npm update && npm audit fix",
        "reset": "npm run clean && npm install && npm run build",
        "status": "npm run status:overview",
        "status:overview": "echo 'üìä PORTFOLIO STATUS OVERVIEW' && echo '============================' && npm run status:health && npm run status:files && npm run status:performance",
        "status:health": "node -e \"console.log('\\nüè• HEALTH STATUS:');try{require('fs').statSync('index.html');console.log('‚úÖ Main file: OK');}catch{console.log('‚ùå Main file: Missing');}try{require('fs').statSync('package.json');console.log('‚úÖ Package config: OK');}catch{console.log('‚ùå Package config: Missing');}try{require('fs').statSync('dist');console.log('‚úÖ Build output: Available');}catch{console.log('‚ö†Ô∏è  Build output: Run npm run build');}\"",
        "status:files": "npm run size-check",
        "status:performance": "npm run lighthouse:extract-scores",
        "precommit": "npm run validate && npm run size-check",
        "prepare": "npm run build",
        "postinstall": "echo 'Dependencies installed successfully'"
    },
    "devDependencies": {
        "@axe-core/cli": "^4.8.2",
        "html-minifier": "^4.0.0",
        "html-validate": "^8.7.4",
        "imagemin": "^8.0.1",
        "imagemin-pngquant": "^9.0.2",
        "imagemin-webp": "^7.0.0",
        "lighthouse": "^11.4.0",
        "live-server": "^1.2.2",
        "prettier": "^3.1.1",
        "snyk": "^1.1274.0"
    },
    "keywords": [
        "portfolio",
        "webgl",
        "rust",
        "autonomous-systems"
    ],
    "author": "Alejandro Figueroa",
    "license": "MIT"
}
